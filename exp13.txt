/*
Roll No:11
Name:Manav Mangesh Uttekar

Title: Pizza parlor accepting maximum M orders. Orders are served in first come first served basis. Order once placed cannot be cancelled. Write C++ program to simulate the system using circular queue using array
*/
#include <iostream>
using namespace std;

class CircularQueue {
    int* orders;
    int front, rear, maxSize;

public:
    CircularQueue(int size) : maxSize(size), front(-1), rear(-1) {
        orders = new int[maxSize];
    }
    ~CircularQueue() { delete[] orders; }

    bool isFull() { return (rear + 1) % maxSize == front; }
    bool isEmpty() { return front == -1; }

    void placeOrder(int order) {
        if (isFull()) {
            cout << "Order queue is full!\n";
            return;
        }
        rear = (rear + 1) % maxSize;
        orders[rear] = order;
        if (front == -1) front = 0;
        cout << "Order placed: " << order << endl;
    }

    void serveOrder() {
        if (isEmpty()) {
            cout << "No orders to serve!\n";
            return;
        }
        cout << "Serving order: " << orders[front] << endl;
        if (front == rear) front = rear = -1; // Queue becomes empty
        else front = (front + 1) % maxSize;
    }

    void displayOrders() {
        if (isEmpty()) {
            cout << "No current orders!\n";
            return;
        }
        cout << "Current orders: ";
        for (int i = front; ; i = (i + 1) % maxSize) {
            cout << orders[i] << " ";
            if (i == rear) break;
        }
        cout << endl;
    }
};

int main() {
    int maxOrders;
    cout << "Enter maximum number of orders: ";
    cin >> maxOrders;

    CircularQueue cq(maxOrders);
    int choice, order;

    do {
        cout << "\n1. Place Order\n2. Serve Order\n3. Display Orders\n4. Exit\nEnter choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter order number: ";
                cin >> order;
                cq.placeOrder(order);
                break;
            case 2:
                cq.serveOrder();
                break;
            case 3:
                cq.displayOrders();
                break;
            case 4:
                cout << "Exiting.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 4);

    return 0;
}

O/p:
Enter maximum number of orders: 5

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 1
Enter order number: 101
Order placed: 101

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 1
Enter order number: 102
Order placed: 102

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 3
Current orders: 101 102

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 2
Serving order: 101

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 3
Current orders: 102

1. Place Order
2. Serve Order
3. Display Orders
4. Exit
Enter choice: 4
Exiting.

