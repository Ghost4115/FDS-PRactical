
/*Roll No:11
Name:Manav Mangesh Uttekar

Title: A double-ended queue (deque) is a linear list in which additions and deletions may be made at either end. Obtain a data representation mapping a deque into a one-dimensional array. Write C++ program to simulate deque with functions to add and delete elements from either end of the deque
*/
#include <iostream>
using namespace std;

class Deque {
    int front, rear, size;
    int* arr;

public:
    Deque(int n) : size(n), front(-1), rear(0) {
        arr = new int[size];
    }

    ~Deque() {
        delete[] arr;
    }

    bool isFull() {
        return (front == 0 && rear == size - 1) || (front == rear + 1);
    }

    bool isEmpty() {
        return (front == -1);
    }

    void addFront(int value) {
        if (isFull()) {
            cout << "Deque is full\n";
            return;
        }
        if (front == -1) {
            front = rear = 0;
        } else if (front == 0) {
            front = size - 1;
        } else {
            front--;
        }
        arr[front] = value;
        cout << "Added " << value << " to front\n";
    }

    void addRear(int value) {
        if (isFull()) {
            cout << "Deque is full\n";
            return;
        }
        if (front == -1) {
            front = rear = 0;
        } else if (rear == size - 1) {
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        cout << "Added " << value << " to rear\n";
    }

    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        cout << "Deleted " << arr[front] << " from front\n";
        if (front == rear) {
            front = rear = -1;
        } else if (front == size - 1) {
            front = 0;
        } else {
            front++;
        }
    }

    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        cout << "Deleted " << arr[rear] << " from rear\n";
        if (front == rear) {
            front = rear = -1;
        } else if (rear == 0) {
            rear = size - 1;
        } else {
            rear--;
        }
    }

    void display() {
        if (isEmpty()) {
            cout << "Deque is empty\n";
            return;
        }
        cout << "Deque elements: ";
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % size;
        }
        cout << endl;
    }
};

int main() {
    int size, choice, value;
    cout << "Enter the size of the deque: ";
    cin >> size;
    Deque dq(size);

    do {
        cout << "\n1. Add Front\n2. Add Rear\n3. Delete Front\n4. Delete Rear\n5. Display\n6. Exit\nEnter choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter value to add to front: ";
                cin >> value;
                dq.addFront(value);
                break;
            case 2:
                cout << "Enter value to add to rear: ";
                cin >> value;
                dq.addRear(value);
                break;
            case 3:
                dq.deleteFront();
                break;
            case 4:
                dq.deleteRear();
                break;
            case 5:
                dq.display();
                break;
            case 6:
                cout << "Exiting.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 6);

    return 0;
}
o/p:

Enter the size of the deque: 5

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 1
Enter value to add to front: 10
Added 10 to front

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 2
Enter value to add to rear: 20
Added 20 to rear

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 5
Deque elements: 10 20

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 3
Deleted 10 from front

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 5
Deque elements: 20

1. Add Front
2. Add Rear
3. Delete Front
4. Delete Rear
5. Display
6. Exit
Enter choice: 6
Exiting.
