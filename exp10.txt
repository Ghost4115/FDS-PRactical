/*
Roll No:11
Name:Manav Mangesh Uttekar

Title: In any language program mostly syntax error occurs due to unbalancing delimiter such as (),{},[]. Write C++ program using stack to check whether given expression is well parenthesized or not.
*/

#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

int precedence(char op) {
    return (op == '+' || op == '-') ? 1 : (op == '*' || op == '/') ? 2 : 0;
}

int applyOperation(int a, int b, char op) {
    return (op == '+') ? a + b : (op == '-') ? a - b : (op == '*') ? a * b : a / b;
}

string infixToPostfix(const string& infix) {
    stack<char> s;
    string postfix = "";
    for (char ch : infix) {
        if (isdigit(ch)) postfix += ch;
        else if (ch == '(') s.push(ch);
        else if (ch == ')') {
            while (!s.empty() && s.top() != '(') postfix += s.top(), s.pop();
            s.pop();
        } else {
            while (!s.empty() && precedence(s.top()) >= precedence(ch)) postfix += s.top(), s.pop();
            s.push(ch);
        }
    }
    while (!s.empty()) postfix += s.top(), s.pop();
    return postfix;
}
int evaluatePostfix(const string& postfix) {
    stack<int> s;
    for (char ch : postfix) {
        if (isdigit(ch)) s.push(ch - '0');
        else {
            int b = s.top(); s.pop();a
            int a = s.top(); s.pop();
            s.push(applyOperation(a, b, ch));
        }
    }
    return s.top();
}
int main() {
    string infix;
    cout << "Enter an infix expression: ";
    cin >> infix;
    string postfix = infixToPostfix(infix);
    cout << "Postfix Expression: " << postfix << "\n";
    cout << "Evaluation Result: " << evaluatePostfix(postfix) << "\n";
    return 0;
}
O/P:
Enter an infix expression: 3 + 5 * 2
Postfix Expression: 352*+
Evaluation Result: 13

